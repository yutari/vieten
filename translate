import { Injectable } from "@angular/core";
import { HttpClient } from "@angular/common/http";
import { BehaviorSubject, Observable } from "rxjs";
import { map } from "rxjs/operators";

@Injectable({
  providedIn: 'root'
})
export class TranslationService {
  public translations:  {[key: string] : string} = {};
  private currentLang = new BehaviorSubject<string>(localStorage.getItem('selectedlanguage') || 'vi');
  

  constructor(private http: HttpClient) {
    this.loadTranslations(this.currentLang.value).subscribe();
    let a = localStorage.getItem('selectedlanguage');
  }


  loadTranslations(lang: string): Observable<void> {
    return this.http.get(`../assets/i18n/${lang}.json`).pipe(
      map((response: any) => {
        this.translations = response;
      })
    );
  }

  translate(key: string): string {
    const keys = key.split('.');
    let result: any = this.translations;
    // console.log(this.translations);
    
    for (const k of keys) {
      if(result[k]) {
        result = result[k];
      } else {
        console.log(`ko thay key ${k}`);
        
        return key;
      }
    }

    return result || key;
  }


  getTranslationKeys(): string[] {
    return Object.keys(this.translations).reduce((acc: string[], curr:string) => {
      const nestedKeys = Object.keys(this.translations[curr]).map(nk => `${curr}.${nk}`);
      return acc.concat(nestedKeys);
    }, []);
  }

  getCurrentLang(): string {
    return this.currentLang.value;
  }
}
